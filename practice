#include <iostream>
#include <queue>
using namespace std;

struct Node
{
    int key;
    Node* p_left;
    Node* p_right;
    int height;
};

Node* createNode(int data)
{
    return new Node {data, nullptr, nullptr, 1};
}

int height(Node* node)
{
    if (node == nullptr)
    {
        return 0;
    }
    return node->height;
}

int getBalance(Node* node)
{
    if (node == nullptr)
    {
        return 0;
    }
    return height(node->p_left) - height(node->p_right);
}

void rightRotate(Node*& A)
{
    Node* B = A->p_left;
    A->p_left = B->p_right;
    B->p_right = A;
    
    A->height = 1 + max(height(A->p_left), height(B->p_right));
    B->height = 1 + max(height(B->p_left), height(B->p_right));
    A = B;
}

void leftRotate(Node*& A)
{
    Node* B = A->p_right;
    A->p_right = B->p_left;
    B->p_left = A;

    A->height = 1 + max(height(A->p_left), height(B->p_right));
    B->height = 1 + max(height(B->p_left), height(B->p_right));
    A = B;
}

void insert(Node*& root, int data)
{
    if (root == nullptr)
    {
        root = createNode(data);
        return;
    }

    if (root->key > data)
    {
        insert(root->p_left, data);
    }
    else if(root->key < data)
    {
        insert(root->p_right, data);
    }
    else
    {
        return;
    }

    root->height = 1 + max(height(root->p_left), height(root->p_right));
    int balance = getBalance(root);
    
    if (balance > 1)
    {
        if (root->p_left->key < data)
        {
            leftRotate(root->p_left);
        }
        rightRotate(root);
    }

    if (balance < -1)
    {
        if (root->p_right->key > data)
        {
            rightRotate(root->p_right);
        }
        leftRotate(root);
    }
}

void LNR(Node* root)
{
    if (root == nullptr)
    {
        return;
    }
    LNR(root->p_left);
    cout << root->key << ' ';
    LNR(root->p_right);
}

void printLevelOrder(Node* root)
{
    if (root == nullptr)
    {
        return;
    }
    queue<Node*> q;
    q.push(root);
    while(!q.empty())
    {
        Node* node = q.front();
        q.pop();
        cout << node->key << ' ';
        if (node->p_left != nullptr)
        {
            q.push(node->p_left);
        }
        if (node->p_right != nullptr)
        {
            q.push(node->p_right);
        }
    }
}

int main()
{
    Node* root = nullptr;
    insert(root, 10);
    insert(root, 11);
    insert(root, 12);
    insert(root, 13);
    insert(root, 5);
    insert(root, 4);
    // insert(root, 3);
    // insert(root, 1);
    printLevelOrder(root);
}
